// Copyright 2025, Aquanox.

#include "EnhancedPaletteModule.h"

#include "EnhancedPaletteSettings.h"
#include "EnhancedPaletteSubsystem.h"
#include "BlueprintEditorSettings.h"
#include "EnhancedPaletteCategory.h"
#include "EnhancedPaletteCustomizations.h"
#include "Kismet2/KismetEditorUtilities.h"

#define LOCTEXT_NAMESPACE  "EnhancedPalette"

DEFINE_LOG_CATEGORY(LogEnhancedPalette);

IMPLEMENT_MODULE(FEnhancedPaletteModule, EnhancedPalette);

void FEnhancedPaletteModule::StartupModule()
{
	if (GIsEditor && !IsRunningCommandlet())
	{
		FCoreDelegates::OnPostEngineInit.AddRaw(this, &FEnhancedPaletteModule::OnPostEngineInitialized);
		FEditorDelegates::OnEditorInitialized.AddRaw(this, &FEnhancedPaletteModule::OnEditorInitialized);
	}
}

void FEnhancedPaletteModule::OnPostEngineInitialized()
{
	FCoreDelegates::OnPostEngineInit.RemoveAll(this);

	EnhancedPaletteCustomizations::Register();
}

void FEnhancedPaletteModule::OnEditorInitialized(double Duration)
{
	FEditorDelegates::OnEditorInitialized.RemoveAll(this);

	FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(this,
		UEnhancedPaletteCategory::StaticClass(), GET_FUNCTION_NAME_CHECKED(UEnhancedPaletteCategory, K2_Initialize));
	FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(this,
		UEnhancedPaletteCategory::StaticClass(), GET_FUNCTION_NAME_CHECKED(UEnhancedPaletteCategory, K2_GatherItems));
}

void FEnhancedPaletteModule::ShutdownModule()
{
	FCoreDelegates::OnPostEngineInit.RemoveAll(this);
	FEditorDelegates::OnEditorInitialized.RemoveAll(this);
	
	FKismetEditorUtilities::UnregisterAutoBlueprintNodeCreation(this);

	EnhancedPaletteCustomizations::Unregister();
}

FPaletteScopedTimeLogger::FPaletteScopedTimeLogger(EMode InMode, FString InMsg,  ELogVerbosity::Type InVerbosity)
	: Msg(MoveTemp(InMsg)), Mode(InMode), Verbosity(InVerbosity)
{
	StartTime = FPlatformTime::Seconds();

	if (Mode == EMode::START_END)
	{
		switch (Verbosity)
		{
		case ELogVerbosity::Warning:	UE_LOG(LogEnhancedPalette, Warning, TEXT("%s"), *Msg); break;
		case ELogVerbosity::Log:		UE_LOG(LogEnhancedPalette, Log, TEXT("%s"), *Msg); break;
		case ELogVerbosity::Verbose:	UE_LOG(LogEnhancedPalette, Verbose, TEXT("%s"), *Msg); break;
		default: checkNoEntry(); break;
		}
	}
}

FPaletteScopedTimeLogger::~FPaletteScopedTimeLogger()
{
	double StopTime = FPlatformTime::Seconds();
	double Delta = (StopTime - StartTime);

	switch (Verbosity)
	{
	case ELogVerbosity::Warning:	UE_LOG(LogEnhancedPalette, Warning, TEXT("%s: Completed in %f secs"), *Msg, Delta); break;
	case ELogVerbosity::Log:		UE_LOG(LogEnhancedPalette, Log, TEXT("%s: Completed in %f secs"), *Msg, Delta); break;
	case ELogVerbosity::Verbose:	UE_LOG(LogEnhancedPalette, Verbose, TEXT("%s: Completed in %f secs"), *Msg, Delta); break;
	default: checkNoEntry(); break;
	}
}

#undef LOCTEXT_NAMESPACE
